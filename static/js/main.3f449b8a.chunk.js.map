{"version":3,"sources":["movies.module.css","components/Movies.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movies","title","overview","image","className","style","moviesy","imagey","src","alt","App","useState","movie","setMovies","search","movieSearch","query","setQuery","useEffect","getMovies","a","fetch","response","json","data","console","log","results","onSubmit","e","preventDefault","type","value","onChange","target","map","movies","key","id","poster_path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,MAAQ,sBAAsB,SAAW,yBAAyB,OAAS,yB,6MCiBhHC,EAfA,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAE/B,OACI,yBAAKC,UAAWC,IAAMC,SAClB,wBAAIF,UAAWC,IAAMJ,OAASA,GAE9B,wBAAIG,UAAWC,IAAMH,UAAWA,GAEhC,yBAAKE,UAAWC,IAAME,OAAQC,IAP5B,kCAOqCL,EAAOM,IAAI,UCqD/CC,G,MA5DH,WAAO,IAAD,EAGWC,mBAAS,IAHpB,mBAGTC,EAHS,KAGFC,EAHE,OAKcF,mBAAS,IALvB,mBAKTG,EALS,KAKDC,EALC,OAOUJ,mBAAS,YAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,2GAAD,OACiFL,EADjF,gCADZ,cACVM,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBC,QAAQC,IAAIF,EAAKG,SACjBd,EAAUW,EAAKG,SANC,2CAAH,qDAmBf,OACE,yBAAKvB,UAAU,OACb,wBAAIA,UAAU,OAAd,0BACA,0BAAMwB,SATQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAY,KAMiBX,UAAU,eACnC,2BACEA,UAAU,aACV2B,KAAK,OACLC,MAAOlB,EACPmB,SAlBa,SAAAJ,GACnBd,EAAYc,EAAEK,OAAOF,OACrBP,QAAQC,IAAIZ,MAkBR,4BAAQV,UAAU,gBAAgB2B,KAAK,UAAvC,WAIF,yBAAK3B,UAAU,UACZQ,EAAMuB,KAAI,SAAAC,GAAM,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAOE,GACZrC,MAAOmC,EAAOnC,MACdC,SAAUkC,EAAOlC,SACjBC,MAAOiC,EAAOG,qBC5CNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.3f449b8a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"moviesy\":\"movies_moviesy__3PfIt\",\"title\":\"movies_title__WeGI_\",\"overview\":\"movies_overview__3ZvVu\",\"imagey\":\"movies_imagey__3Omnh\"};","import React from \"react\";\r\nimport style from \"../movies.module.css\";\r\n\r\nconst Movies = ({ title, overview, image }) => {\r\n    const x = \"https://image.tmdb.org/t/p/w500\";\r\n    return (\r\n        <div className={style.moviesy}>\r\n            <h1 className={style.title} >{title}</h1>\r\n\r\n            <h3 className={style.overview}>{overview}</h3>\r\n\r\n            <img className={style.imagey} src={x + image} alt=\"pic\" />\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Movies;","import React, { useState, useEffect } from \"react\";\r\nimport Movies from \"./components/Movies\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n\r\n\r\n  const [movie, setMovies] = useState([]);\r\n  // state for search\r\n  const [search, movieSearch] = useState(\"\");\r\n  // default serach item to show\r\n  const [query, setQuery] = useState(\"Avengers\");\r\n\r\n  useEffect(() => {\r\n    getMovies();\r\n  }, [query]);\r\n\r\n  const getMovies = async () => {\r\n    const response = await fetch(\r\n      `https://api.themoviedb.org/3/search/movie?api_key=1f6476037854ed2ca940c0c708c87d0e&language=en-US&query=${query}&page=1&include_adult=false`\r\n    );\r\n    const data = await response.json();\r\n    console.log(data.results);\r\n    setMovies(data.results);\r\n  };\r\n\r\n  const searchMovies = e => {\r\n    movieSearch(e.target.value);\r\n    console.log(search);\r\n  };\r\n  const getSearch = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    movieSearch('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"top\">Hollywood Movie Search</h1>\r\n      <form onSubmit={getSearch} className=\"search-form\">\r\n        <input\r\n          className=\"search-bar\"\r\n          type=\"text\"\r\n          value={search}\r\n          onChange={searchMovies}\r\n        />\r\n        <button className=\"search-button\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      <div className=\"movies\">\r\n        {movie.map(movies => (\r\n          <Movies\r\n            key={movies.id}\r\n            title={movies.title}\r\n            overview={movies.overview}\r\n            image={movies.poster_path}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}